data class MovieDetail(
    val title: String,
    val description: String,
    val posterUrl: String? = null
)

@Composable
fun MovieDetailsScreen(
    onBackClick: () -> Unit = {}
) {
    val movieDetail = remember {
        MovieDetail(
            title = "The Shawshank Redemption",
            description = "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency."
        )
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF1B2631))
    ) {
        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            // Movie poster section
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(500.dp)
                    .background(
                        brush = Brush.verticalGradient(
                            colors = listOf(
                                Color(0xFFF5F5F5),
                                Color(0xFFE8E8E8)
                            )
                        )
                    ),
                contentAlignment = Alignment.Center
            ) {
                // Movie poster
                MoviePosterArt(
                    modifier = Modifier
                        .width(280.dp)
                        .height(400.dp)
                )
            }

            // Movie details section
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color(0xFF1B2631))
                    .padding(24.dp)
            ) {
                Column {
                    // Back button
                    IconButton(
                        onClick = onBackClick,
                        modifier = Modifier
                            .padding(bottom = 16.dp)
                            .size(40.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Back",
                            tint = Color.White,
                            modifier = Modifier.size(24.dp)
                        )
                    }

                    // Movie title
                    Text(
                        text = movieDetail.title,
                        fontSize = 28.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color.White,
                        lineHeight = 32.sp,
                        modifier = Modifier.padding(bottom = 16.dp)
                    )

                    // Movie description
                    Text(
                        text = movieDetail.description,
                        fontSize = 16.sp,
                        color = Color(0xFFB0BEC5),
                        lineHeight = 24.sp
                    )
                }
            }
        }
    }
}

@Composable
fun MoviePosterArt(
    modifier: Modifier = Modifier
) {
    Box(
        modifier = modifier
            .clip(RoundedCornerShape(12.dp))
            .background(Color.White)
            .padding(16.dp)
    ) {
        // Vintage movie poster recreation
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(
                    brush = Brush.verticalGradient(
                        colors = listOf(
                            Color(0xFFB8D4C7), // Mint green
                            Color(0xFF87CEEB), // Sky blue
                            Color(0xFFF5DEB3)  // Wheat/sand
                        )
                    )
                )
        ) {
            // Mountain silhouettes
            Canvas(
                modifier = Modifier.fillMaxSize()
            ) { size ->
                val mountainPath = Path().apply {
                    moveTo(0f, size.height * 0.7f)
                    lineTo(size.width * 0.2f, size.height * 0.5f)
                    lineTo(size.width * 0.4f, size.height * 0.6f)
                    lineTo(size.width * 0.7f, size.height * 0.45f)
                    lineTo(size.width, size.height * 0.55f)
                    lineTo(size.width, size.height)
                    lineTo(0f, size.height)
                    close()
                }
                
                drawPath(
                    path = mountainPath,
                    color = androidx.compose.ui.graphics.Color(0xFF2F4F4F)
                )
                
                // Water/ocean
                drawRect(
                    color = androidx.compose.ui.graphics.Color(0xFF4682B4),
                    topLeft = Offset(0f, size.height * 0.75f),
                    size = Size(size.width, size.height * 0.25f)
                )
                
                // Water reflection lines
                for (i in 0..8) {
                    drawLine(
                        color = androidx.compose.ui.graphics.Color(0xFF5F9EA0),
                        start = Offset(0f, size.height * 0.75f + (i * 8).dp.toPx()),
                        end = Offset(size.width, size.height * 0.75f + (i * 8).dp.toPx()),
                        strokeWidth = 1.dp.toPx()
                    )
                }
            }
            
            // Movie title text overlay
            Column(
                modifier = Modifier
                    .align(Alignment.TopCenter)
                    .padding(top = 32.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "STEPHEN KING'S RITA HAYWORTH",
                    fontSize = 8.sp,
                    color = Color(0xFF2F4F4F),
                    fontWeight = FontWeight.Bold
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Text(
                    text = "SHAWSHANK",
                    fontSize = 14.sp,
                    color = Color(0xFF2F4F4F),
                    fontWeight = FontWeight.Bold,
                    letterSpacing = 2.sp
                )
                
                Text(
                    text = "REDEMPTION",
                    fontSize = 14.sp,
                    color = Color(0xFF2F4F4F),
                    fontWeight = FontWeight.Bold,
                    letterSpacing = 2.sp
                )
            }
            
            // Silhouette figure
            Box(
                modifier = Modifier
                    .align(Alignment.Center)
                    .offset(y = 40.dp)
            ) {
                Canvas(
                    modifier = Modifier.size(80.dp, 120.dp)
                ) { size ->
                    // Person silhouette
                    val personPath = Path().apply {
                        // Head
                        addOval(
                            Rect(
                                size.width * 0.35f,
                                size.height * 0.1f,
                                size.width * 0.65f,
                                size.height * 0.3f
                            )
                        )
                        
                        // Body
                        addRect(
                            Rect(
                                size.width * 0.4f,
                                size.height * 0.3f,
                                size.width * 0.6f,
                                size.height * 0.7f
                            )
                        )
                        
                        // Arms
                        addRect(
                            Rect(
                                size.width * 0.25f,
                                size.height * 0.35f,
                                size.width * 0.4f,
                                size.height * 0.6f
                            )
                        )
                        
                        addRect(
                            Rect(
                                size.width * 0.6f,
                                size.height * 0.35f,
                                size.width * 0.75f,
                                size.height * 0.6f
                            )
                        )
                        
                        // Legs
                        addRect(
                            Rect(
                                size.width * 0.4f,
                                size.height * 0.7f,
                                size.width * 0.48f,
                                size.height * 0.95f
                            )
                        )
                        
                        addRect(
                            Rect(
                                size.width * 0.52f,
                                size.height * 0.7f,
                                size.width * 0.6f,
                                size.height * 0.95f
                            )
                        )
                    }
                    
                    drawPath(
                        path = personPath,
                        color = androidx.compose.ui.graphics.Color.Black
                    )
                }
            }
            
            // Bottom credits text
            Column(
                modifier = Modifier
                    .align(Alignment.BottomCenter)
                    .padding(bottom = 16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "TIM ROBBINS    MORGAN FREEMAN",
                    fontSize = 6.sp,
                    color = Color(0xFF2F4F4F),
                    fontWeight = FontWeight.Bold
                )
                
                Spacer(modifier = Modifier.height(4.dp))
                
                Text(
                    text = "A FRANK DARABONT FILM",
                    fontSize = 5.sp,
                    color = Color(0xFF2F4F4F)
                )
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun MovieDetailsScreenPreview() {
    MaterialTheme {
        MovieDetailsScreen()
    }
}