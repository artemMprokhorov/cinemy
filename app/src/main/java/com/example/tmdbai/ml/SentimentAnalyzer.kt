package com.example.tmdbai.ml

import android.content.Context
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.serialization.json.Json
import java.io.IOException
import kotlin.math.abs

/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è TmdbAi
 * –ë—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 */
class SentimentAnalyzer private constructor(private val context: Context) {
    
    private var model: KeywordSentimentModel? = null
    private var isInitialized = false
    
    companion object {
        @Volatile
        private var INSTANCE: SentimentAnalyzer? = null
        
        fun getInstance(context: Context): SentimentAnalyzer {
            return INSTANCE ?: synchronized(this) {
                INSTANCE ?: SentimentAnalyzer(context.applicationContext).also { INSTANCE = it }
            }
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (–≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
     */
    suspend fun initialize(): Boolean = withContext(Dispatchers.IO) {
        try {
            if (isInitialized) return@withContext true
            
            // Load model from assets (currently using built-in model)
            // val modelJson = context.assets.open("ml_models/keyword_sentiment_model.json").use { inputStream ->
            //     inputStream.bufferedReader().readText()
            // }
            
            model = createSimpleModel()
            isInitialized = true
            true
        } catch (e: Exception) {
            e.printStackTrace()
            false
        }
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
     */
    suspend fun analyzeSentiment(text: String): SentimentResult = withContext(Dispatchers.Default) {
        if (!isInitialized || model == null) {
            return@withContext SentimentResult.error("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        }
        
        if (text.isBlank()) {
            return@withContext SentimentResult.neutral()
        }
        
        try {
            analyzeWithKeywords(text, model!!)
        } catch (e: Exception) {
            SentimentResult.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${e.message}")
        }
    }
    
    /**
     * –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
     */
    suspend fun analyzeBatch(texts: List<String>): List<SentimentResult> = withContext(Dispatchers.Default) {
        texts.map { text -> analyzeSentiment(text) }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
     */
    fun getModelInfo(): ModelInfo? = model?.modelInfo
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private fun createSimpleModel(): KeywordSentimentModel {
        val modelInfo = ModelInfo(
            type = "keyword_sentiment_analysis",
            version = "2.0.0",
            language = "en",
            accuracy = "85%+",
            speed = "very_fast"
        )
        
        val positiveKeywords = listOf(
            "amazing", "fantastic", "great", "excellent", "wonderful", "brilliant",
            "outstanding", "superb", "magnificent", "perfect", "incredible", "awesome",
            "beautiful", "lovely", "good", "nice", "best", "favorite", "love", "enjoy",
            "phenomenal", "spectacular", "remarkable", "exceptional", "marvelous",
            "stunning", "impressive", "captivating", "engaging", "compelling"
        )
        
        val negativeKeywords = listOf(
            "terrible", "awful", "horrible", "bad", "worst", "hate", "disgusting",
            "boring", "stupid", "dumb", "annoying", "frustrating", "disappointing",
            "waste", "rubbish", "garbage", "trash", "sucks", "pathetic", "lame",
            "atrocious", "dreadful", "appalling", "mediocre", "unwatchable",
            "cringe", "cheesy", "predictable", "clich√©", "overrated"
        )
        
        val neutralIndicators = listOf(
            "okay", "decent", "average", "fine", "acceptable", "reasonable",
            "standard", "typical", "normal", "ordinary", "mediocre", "so-so"
        )
        
        val intensityModifiers = mapOf(
            "absolutely" to 1.5,
            "completely" to 1.4,
            "totally" to 1.3,
            "extremely" to 1.3,
            "incredibly" to 1.3,
            "very" to 1.2,
            "really" to 1.1,
            "pretty" to 0.8,
            "somewhat" to 0.7,
            "slightly" to 0.6,
            "not" to -1.0,
            "never" to -1.0,
            "barely" to -0.5
        )
        
        val contextBoosters = ContextBoosters(
            movieTerms = listOf(
                "cinematography", "acting", "plot", "story", "director", "performance",
                "script", "dialogue", "visuals", "effects", "soundtrack", "editing"
            ),
            positiveContext = listOf(
                "masterpiece", "artistry", "brilliant", "genius", "innovative",
                "groundbreaking", "revolutionary", "timeless", "classic"
            ),
            negativeContext = listOf(
                "flop", "disaster", "failure", "ruined", "destroyed", "butchered",
                "mangled", "butchered", "torture", "nightmare"
            )
        )
        
        val algorithm = AlgorithmConfig(
            baseConfidence = 0.6,
            keywordWeight = 1.0,
            contextWeight = 0.3,
            modifierWeight = 0.4,
            neutralThreshold = 0.5,
            minConfidence = 0.3,
            maxConfidence = 0.9
        )
        
        return KeywordSentimentModel(
            modelInfo = modelInfo,
            positiveKeywords = positiveKeywords,
            negativeKeywords = negativeKeywords,
            neutralIndicators = neutralIndicators,
            intensityModifiers = intensityModifiers,
            contextBoosters = contextBoosters,
            algorithm = algorithm
        )
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å fallback
     */
    private fun analyzeWithKeywords(text: String, model: KeywordSentimentModel): SentimentResult {
        return try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            analyzeWithEnhancedKeywords(text, model)
        } catch (e: Exception) {
            // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            analyzeWithSimpleKeywords(text, model)
        }
    }
    
    /**
     * –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
     */
    private fun analyzeWithEnhancedKeywords(text: String, model: KeywordSentimentModel): SentimentResult {
        val textLower = text.lowercase()
        val words = textLower.split(Regex("\\W+")).filter { it.isNotBlank() }
        
        var positiveScore = 0.0
        var negativeScore = 0.0
        var neutralScore = 0.0
        var foundWords = mutableListOf<String>()
        
        // –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for (word in words) {
            when {
                model.positiveKeywords.contains(word) -> {
                    positiveScore += 1.0
                    foundWords.add("+$word")
                }
                model.negativeKeywords.contains(word) -> {
                    negativeScore += 1.0
                    foundWords.add("-$word")
                }
                model.neutralIndicators?.contains(word) == true -> {
                    neutralScore += 0.5
                    foundWords.add("~$word")
                }
            }
        }
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        model.intensityModifiers?.forEach { (modifier, multiplier) ->
            if (textLower.contains(modifier)) {
                when {
                    multiplier > 1.0 -> {
                        positiveScore *= multiplier
                        negativeScore *= multiplier
                    }
                    multiplier < 0 -> {
                        // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
                        val temp = positiveScore
                        positiveScore = negativeScore * abs(multiplier)
                        negativeScore = temp * abs(multiplier)
                    }
                    else -> {
                        positiveScore *= multiplier
                        negativeScore *= multiplier
                    }
                }
                foundWords.add("*$modifier")
            }
        }
        
        // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —É—Å–∏–ª–∏—Ç–µ–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –º–æ–¥–µ–ª–∏)
        model.contextBoosters?.let { boosters ->
            boosters.movieTerms?.forEach { term ->
                if (textLower.contains(term)) {
                    foundWords.add("üé¨$term")
                }
            }
            
            boosters.positiveContext?.forEach { context ->
                if (textLower.contains(context)) {
                    positiveScore += 0.3
                    foundWords.add("‚ú®$context")
                }
            }
            
            boosters.negativeContext?.forEach { context ->
                if (textLower.contains(context)) {
                    negativeScore += 0.3
                    foundWords.add("üí•$context")
                }
            }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        val algorithm = model.algorithm
        val totalScore = positiveScore + negativeScore + neutralScore
        
        return when {
            totalScore == 0.0 -> SentimentResult.neutral()
            
            positiveScore > negativeScore && positiveScore > neutralScore -> {
                val confidence = minOf(
                    algorithm.maxConfidence,
                    algorithm.baseConfidence + (positiveScore - maxOf(negativeScore, neutralScore)) * 0.15
                )
                SentimentResult.positive(confidence, foundWords)
            }
            
            negativeScore > positiveScore && negativeScore > neutralScore -> {
                val confidence = minOf(
                    algorithm.maxConfidence,
                    algorithm.baseConfidence + (negativeScore - maxOf(positiveScore, neutralScore)) * 0.15
                )
                SentimentResult.negative(confidence, foundWords)
            }
            
            else -> {
                val confidence = algorithm.baseConfidence
                SentimentResult.neutral(confidence, foundWords)
            }
        }
    }
    
    /**
     * –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –∫–∞–∫ fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
     */
    private fun analyzeWithSimpleKeywords(text: String, model: KeywordSentimentModel): SentimentResult {
        val textLower = text.lowercase()
        val words = textLower.split(Regex("\\W+")).filter { it.isNotBlank() }
        
        var positiveScore = 0.0
        var negativeScore = 0.0
        var foundWords = mutableListOf<String>()
        
        for (word in words) {
            if (model.positiveKeywords.contains(word)) {
                positiveScore += 1.0
                foundWords.add("+$word")
            }
            if (model.negativeKeywords.contains(word)) {
                negativeScore += 1.0
                foundWords.add("-$word")
            }
        }
        
        val algorithm = model.algorithm
        
        return when {
            positiveScore > negativeScore -> {
                val confidence = minOf(
                    algorithm.maxConfidence,
                    algorithm.baseConfidence + (positiveScore - negativeScore) * 0.1
                )
                SentimentResult.positive(confidence, foundWords)
            }
            negativeScore > positiveScore -> {
                val confidence = minOf(
                    algorithm.maxConfidence,
                    algorithm.baseConfidence + (negativeScore - positiveScore) * 0.1
                )
                SentimentResult.negative(confidence, foundWords)
            }
            else -> SentimentResult.neutral()
        }
    }
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */
data class SentimentResult(
    val sentiment: SentimentType,
    val confidence: Double,
    val isSuccess: Boolean = true,
    val errorMessage: String? = null,
    val foundKeywords: List<String> = emptyList(),
    val processingTimeMs: Long = 0L
) {
    companion object {
        fun positive(confidence: Double, keywords: List<String> = emptyList()) = 
            SentimentResult(SentimentType.POSITIVE, confidence, foundKeywords = keywords)
            
        fun negative(confidence: Double, keywords: List<String> = emptyList()) = 
            SentimentResult(SentimentType.NEGATIVE, confidence, foundKeywords = keywords)
            
        fun neutral(confidence: Double = 0.5, keywords: List<String> = emptyList()) = 
            SentimentResult(SentimentType.NEUTRAL, confidence, foundKeywords = keywords)
            
        fun error(message: String) = 
            SentimentResult(SentimentType.NEUTRAL, 0.0, false, message)
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
     */
    fun getDescription(): String = when {
        !isSuccess -> "–û—à–∏–±–∫–∞: $errorMessage"
        sentiment == SentimentType.POSITIVE -> "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π (${(confidence * 100).toInt()}%)"
        sentiment == SentimentType.NEGATIVE -> "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π (${(confidence * 100).toInt()}%)"
        else -> "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
    }
}

/**
 * –¢–∏–ø—ã —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */
enum class SentimentType {
    POSITIVE, NEGATIVE, NEUTRAL
}

/**
 * –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è keyword-based –∞–Ω–∞–ª–∏–∑–∞
 */
data class KeywordSentimentModel(
    val modelInfo: ModelInfo,
    val positiveKeywords: List<String>,
    val negativeKeywords: List<String>,
    val neutralIndicators: List<String>? = null,
    val intensityModifiers: Map<String, Double>? = null,
    val contextBoosters: ContextBoosters? = null,
    val algorithm: AlgorithmConfig
)

data class ModelInfo(
    val type: String,
    val version: String,
    val language: String,
    val accuracy: String,
    val speed: String
)

data class AlgorithmConfig(
    val baseConfidence: Double,
    val keywordWeight: Double? = 1.0,
    val contextWeight: Double? = 0.3,
    val modifierWeight: Double? = 0.4,
    val neutralThreshold: Double,
    val minConfidence: Double,
    val maxConfidence: Double
)

data class ContextBoosters(
    val movieTerms: List<String>? = null,
    val positiveContext: List<String>? = null,
    val negativeContext: List<String>? = null
)