name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true

jobs:
  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.6

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Check code formatting
        run: ./gradlew ktlintCheck

      - name: Run detekt static analysis
        run: ./gradlew detekt

      - name: Check for dependency updates
        run: ./gradlew dependencyUpdates

      - name: Run unit tests
        run: ./gradlew test

      - name: Run lint checks
        run: ./gradlew lint

  # Security checks
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.6

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Check for vulnerable dependencies
        uses: snyk/actions-gradle@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

      - name: Run OWASP dependency check
        run: ./gradlew dependencyCheckAnalyze

  # Build verification
  build-verification:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.6

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build debug APK
        run: ./gradlew assembleDebug

      - name: Build development debug APK
        run: ./gradlew assembleDevelopmentDebug

      - name: Build staging debug APK
        run: ./gradlew assembleStagingDebug

      - name: Build production debug APK
        run: ./gradlew assembleProductionDebug

  # Comment PR with results
  comment-pr:
    needs: [code-quality, security, build-verification]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => comment.user.type === 'Bot');
            
            const codeQualityStatus = '${{ needs.code-quality.result }}';
            const securityStatus = '${{ needs.security.result }}';
            const buildStatus = '${{ needs.build-verification.result }}';
            
            const overallStatus = [codeQualityStatus, securityStatus, buildStatus].every(status => status === 'success') ? '✅' : '❌';
            
            const comment = `## Pull Request Checks ${overallStatus}
            
            ### Results:
            - **Code Quality:** ${codeQualityStatus === 'success' ? '✅ Passed' : '❌ Failed'}
            - **Security:** ${securityStatus === 'success' ? '✅ Passed' : '❌ Failed'}
            - **Build Verification:** ${buildStatus === 'success' ? '✅ Passed' : '❌ Failed'}
            
            ${overallStatus === '✅' ? '🎉 All checks passed! This PR is ready for review.' : '⚠️ Some checks failed. Please review the logs above.'}
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment,
              });
            }
